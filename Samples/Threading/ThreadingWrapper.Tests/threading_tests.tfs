using TaffyScript.Threading;
using TaffyScript.Threading.Locks;

namespace TaffyScript.Threading.Tests {
    script main {
        print("Threading without locks")
        thread_fire(print_thread_id);
        thread_fire(print_thread_id);
        thread_sleep(500);
        print("\nFinished!\n");
        print("Threading with locks");
        var m = new moniter();
        thread_fire(print_thread_id_locked, m);
        thread_fire(print_thread_id_locked, m);
        thread_sleep(500);
        print("Finished\n");
        print("Starting threads that have a result:");
        var thread1 = thread_start(script_with_result);
        var thread2 = thread_start(script_with_result);
        var result = thread_get_result(thread1);
        print_thread_result(result);
        result = thread_get_result_array(thread2);
        print_thread_result(result);

        print("\nStarting thread that throws an exception:")
        thread1 = thread_start(script_with_exception);
        result = thread_get_result(thread1);
        print_thread_result(result);
    }

    script print_thread_id() {
        for(var i = 0; i < 10; i++) {
            print(thread_get_id());
            thread_sleep(1);
        }
    }

    script print_thread_id_locked(key) {
        key.lock();
        for(var i = 0; i < 10; i++) {
            print(thread_get_id());
            thread_sleep(1);
        }
        print("");
        key.unlock();
    }

    script script_with_result() {
        return 1;
    }

    script script_with_exception() {
        show_error("Thread " + string(thread_get_id()) + " threw an error", true);
    }

    script print_thread_result(result) {
        var value, exception;
        if(typeof(result) == "array") {
            exception = result[0];
            value = result[1];
        } else {
            exception = result.exception;
            value = result.result;
        }
        if(exception != "")
            print("Thread Failed: " + exception);
        else
            print("Thread Result: " + string(value));
    }
}