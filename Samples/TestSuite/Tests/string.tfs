using UnitTests;
using TaffyScript;
using TaffyScript.Strings;

namespace LanguageTests {
    script run_string_tests() {
        var tests = new UnitTest("String Tests",
                                      string_empty_equals_empty,
                                      string_base64,
                                      string_from_num,
                                      string_from_array1,
                                      string_from_array2,
                                      string_from_delegate,
                                      string_from_instance,
                                      string_literal_contains,
                                      string_literal_copy,
                                      string_literal_count,
                                      string_literal_delete,
                                      string_literal_digits,
                                      string_literal_duplicate,
                                      string_literal_ends_with,
                                      string_literal_get,
                                      string_literal_index_of,
                                      string_literal_insert,
                                      string_literal_last_index_of,
                                      string_literal_letters,
                                      string_literal_letters_digits,
                                      string_literal_lower,
                                      string_literal_ord,
                                      string_literal_replace,
                                      string_literal_replace_all,
                                      string_literal_starts_with,
                                      string_literal_trim,
                                      string_literal_trim_end,
                                      string_literal_trim_start,
                                      string_literal_upper,
                                      string_variable_contains,
                                      string_variable_copy,
                                      string_variable_count,
                                      string_variable_delete,
                                      string_variable_digits,
                                      string_variable_duplicate,
                                      string_variable_ends_with,
                                      string_variable_get,
                                      string_variable_index_of,
                                      string_variable_insert,
                                      string_variable_last_index_of,
                                      string_variable_letters,
                                      string_variable_letters_digits,
                                      string_variable_lower,
                                      string_variable_ord,
                                      string_variable_replace,
                                      string_variable_replace_all,
                                      string_variable_starts_with,
                                      string_variable_trim,
                                      string_variable_trim_end,
                                      string_variable_trim_start,
                                      string_variable_upper,
                                      string_script_char_at,
                                      string_script_copy,
                                      string_script_count,
                                      string_script_delete,
                                      string_script_digits,
                                      string_script_insert,
                                      string_script_length,
                                      string_script_letters,
                                      string_script_letters_digits,
                                      string_script_lower,
                                      string_script_ord_at,
                                      string_script_pos,
                                      string_script_repeat,
                                      string_script_replace,
                                      string_script_replace_all,
                                      string_script_upper);
        tests.run_tests();
    }

    script string_empty_equals_empty() {
        test_it('"" == ""');
        assert_equal("", "");
        var left = "";
        var right = "";
        assert_equal(left, right);
    }

    script string_base64() {
        test_it("base64");
        var value = "Hello";
        var encode = base64_encode(value);
        assert_not_equal(value, encode);
        assert_equal(value, base64_decode(encode));
    }

    script string_from_num() {
        test_it("int -> string");
        assert_equal(string(5), "5");
    }

    script string_from_array1() {
        test_it("array1 -> string");
        assert_equal(string([0,1,2]), "[0, 1, 2]");
    }

    script string_from_array2() {
        test_it("array2 -> string");
        var arr = [["pig","oink"], ["cow","moo"]];
        assert_equal(string(arr), "[[pig, oink], [cow, moo]]");
    }

    script string_from_delegate() {
        test_it("del -> string");
        var del = string_from_delegate;
        assert_equal(string(del), "string_from_delegate");
    }

    script string_from_instance() {
        test_it("inst -> string");
        var obj = new obj_comp1(); //definition in script_composition.tfs
        assert_equal(string(obj), "LanguageTests.obj_comp1");
    }

    script int_from_string() {
        test_it("string -> int");
        assert_equal(real("10"), 10);
    }

    script float_from_string() {
        test_it("string -> float");
        assert_equal(real("1.5"), 15);
    }

    script string_literal_length() {
        test_it("\"\".length");
        assert_equal("hello".length, 5);
    }

    script string_literal_contains() {
        test_it("\"\".contains()");
        assert("hello".contains("lo"));
    }

    script string_literal_copy() {
        test_it("\"\".copy()");
        assert_equal("moo".copy(), "moo");
        assert_equal("moo".copy(1), "oo");
        assert_equal("moo".copy(1, 1), "o");
    }

    script string_literal_count() {
        test_it("\"\".count()");
        assert_equal("hello world".count("l"), 3);
    }

    script string_literal_delete() {
        test_it("\"\".delete()");
        assert_equal("hello".delete(1, 2), "hlo");
    }

    script string_literal_digits() {
        test_it("\"\".digits()");
        assert_equal("a1m2_".digits(), "12");
    }

    script string_literal_duplicate() {
        test_it("\"\".duplicate()");
        assert_equal("moo".duplicate(3), "moomoomoo");
    }

    script string_literal_ends_with() {
        test_it("\"\".ends_with()");
        assert("oink".ends_with("k"));
        assert("oink".ends_with("oink"));
        assert_false("oink".ends_with("m"));
    }

    script string_literal_get() {
        test_it("\"\".get()");
        var chr = "hello"[1];
        assert_equal(chr, "e");
    }

    script string_literal_index_of() {
        test_it("\"\".index_of()");
        assert_equal("hello".index_of("l"), 2);
        assert_equal("hello".index_of("l", 3), 3);
    }

    script string_literal_insert() {
        test_it("\"\".insert()");
        assert_equal("helo".insert(2, "n"), "henlo");
    }

    script string_literal_last_index_of() {
        test_it("\"\".last_index_of()");
        assert_equal("hello".last_index_of("l"), 3);
        assert_equal("hello".last_index_of("l", 2), 2);
    }

    script string_literal_letters() {
        test_it("\"\".letters()");
        assert_equal("a1m2_".letters(), "am");
    }

    script string_literal_letters_digits() {
        test_it("\"\".letters_digits()");
        assert_equal("a1m2_".letters_digits(), "a1m2");
    }

    script string_literal_lower() {
        test_it("\"\".lower()");
        assert_equal("HelLo".lower(), "hello");
    }

    script string_literal_ord() {
        test_it("\"\".ord()");
        assert_equal("hello".ord(2), 108);
    }

    script string_literal_replace() {
        test_it("\"\".replace()");
        assert_equal("hello".replace("l", "n"), "henlo");
    }

    script string_literal_replace_all() {
        test_it("\"\".replace_all()");
        assert_equal("hello".replace_all("l", "n"), "henno");
    }

    script string_literal_starts_with() {
        test_it("\"\".starts_with()");
        assert("oink".starts_with("o"));
        assert("oink".starts_with("oink"));
        assert_false("oink".starts_with("m"));
    }

    script string_literal_split() {
        test_it("\"\".split()");
        assert(array_equals("hello world ".split(" "), ["hello", "world", ""]));
        assert(array_equals("hello world ".split(" ", true), ["hello", "world"]));
    }

    script string_literal_trim() {
        test_it("\"\".trim()");
        assert_equal("  moo  ".trim(), "moo");
        assert_equal("  moo  ".trim(" ", "o"), "m");
    }

    script string_literal_trim_end() {
        test_it("\"\".trim_end()");
        assert_equal("  moo  ".trim_end(), "  moo");
        assert_equal("  moo  ".trim_end(" ", "o"), "  m");
    }

    script string_literal_trim_start() {
        test_it("\"\".trim_start()");
        assert_equal("  moo  ".trim_start(), "moo  ");
        assert_equal("  moo  ".trim_start(" ", "m"), "oo  ");
    }

    script string_literal_upper() {
        test_it("\"\".upper()");
        assert_equal("HelLo".upper(), "HELLO");
    }

    script string_variable_length() {
        test_it("string.length");
        var str = "hello";
        assert_equal(str.length, 5);
    }

    script string_variable_contains() {
        test_it("string.contains()");
        var str = "hello";
        assert(str.contains("lo"));
    }

    script string_variable_copy() {
        test_it("string.copy()");
        var str = "moo";
        assert_equal(str.copy(), "moo");
        assert_equal(str.copy(1), "oo");
        assert_equal(str.copy(1, 1), "o");
    }

    script string_variable_count() {
        test_it("string.count()");
        var str = "hello world";
        assert_equal(str.count("l"), 3);
    }

    script string_variable_delete() {
        test_it("string.delete()");
        var str = "hello";
        assert_equal(str.delete(1, 2), "hlo");
    }

    script string_variable_digits() {
        test_it("string.digits()");
        var str = "a1m2_";
        assert_equal(str.digits(), "12");
    }

    script string_variable_duplicate() {
        test_it("string.duplicate()");
        var str = "moo";
        assert_equal(str.duplicate(3), "moomoomoo");
    }

    script string_variable_ends_with() {
        test_it("string.ends_with()");
        var str = "oink";
        assert(str.ends_with("k"));
        assert(str.ends_with("oink"));
        assert_false(str.ends_with("m"));
    }

    script string_variable_get() {
        test_it("string.get()");
        var str = "hello";
        var chr = str[1];
        assert_equal(chr, "e");
    }

    script string_variable_index_of() {
        test_it("string.index_of()");
        var str = "hello";
        assert_equal(str.index_of("l"), 2);
        assert_equal(str.index_of("l", 3), 3);
    }

    script string_variable_insert() {
        test_it("string.insert()");
        var str = "helo";
        assert_equal(str.insert(2, "n"), "henlo");
    }

    script string_variable_last_index_of() {
        test_it("string.last_index_of()");
        var str = "hello";
        assert_equal(str.last_index_of("l"), 3);
        assert_equal(str.last_index_of("l", 2), 2);
    }

    script string_variable_letters() {
        test_it("string.letters()");
        var str = "a1m2_";
        assert_equal(str.letters(), "am");
    }

    script string_variable_letters_digits() {
        test_it("string.letters_digits()");
        var str = "a1m2_";
        assert_equal(str.letters_digits(), "a1m2");
    }

    script string_variable_lower() {
        test_it("string.lower()");
        var str = "HelLo";
        assert_equal(str.lower(), "hello");
    }

    script string_variable_ord() {
        test_it("string.ord()");
        var str = "hello";
        assert_equal(str.ord(2), 108);
    }

    script string_variable_replace() {
        test_it("string.replace()");
        var str = "hello";
        assert_equal(str.replace("l", "n"), "henlo");
    }

    script string_variable_replace_all() {
        test_it("string.replace_all()");
        var str = "hello";
        assert_equal(str.replace_all("l", "n"), "henno");
    }

    script string_variable_starts_with() {
        test_it("string.starts_with()");
        var str = "oink";
        assert(str.starts_with("o"));
        assert(str.starts_with("oink"));
        assert_false(str.starts_with("m"));
    }

    script string_variable_split() {
        test_it("string.split()");
        var str = "hello world ";
        assert(array_equals(str.split(" "), ["hello", "world", ""]));
        assert(array_equals(str.split(" ", true), ["hello", "world"]));
    }

    script string_variable_trim() {
        test_it("string.trim()");
        var str = "  moo  ";
        assert_equal(str.trim(), "moo");
        assert_equal(str.trim(" ", "o"), "m");
    }

    script string_variable_trim_end() {
        test_it("string.trim_end()");
        var str = "  moo  ";
        assert_equal(str.trim_end(), "  moo");
        assert_equal(str.trim_end(" ", "o"), "  m");
    }

    script string_variable_trim_start() {
        test_it("string.trim_start()");
        var str = "  moo  ";
        assert_equal(str.trim_start(), "moo  ");
        assert_equal(str.trim_start(" ", "m"), "oo  ");
    }

    script string_variable_upper() {
        test_it("string.upper()");
        var str = "HelLo";
        assert_equal("HelLo".upper(), "HELLO");
    }

    script string_script_char_at() {
        test_it("string_char_at()");
        assert_equal(string_char_at("hello", 1), "e");
    }

    script string_script_copy() {
        test_it("string_copy()");
        var copy = string_copy("hello", 1, 3);
        assert_equal(copy, "ell");
    }

    script string_script_count() {
        test_it("string_count()");
        var count = string_count("hello", "l");
        assert_equal(count, 2);
    }

    script string_script_delete() {
        test_it("string_delete()");
        var delete = string_delete("hello", 1, 2);
        assert_equal(delete, "hlo");
    }

    script string_script_digits() {
        test_it("string_digits()");
        var result = string_digits("10poasfd20");
        assert_equal(result, "1020");
    }

    script string_script_insert() {
        test_it("string_insert()");
        var result = string_insert("hlo", "el", 1);
        assert_equal(result, "hello");
    }

    script string_script_join() {
        test_it("string_join");
        var result = string_join(", ", 0, "moo", [32,32]);
        assert_equal(result, "0, moo, [32, 32]");
    }

    script string_script_length() {
        test_it("string_length()");
        var result = string_length("hello");
        assert_equal(result, 5);
    }

    script string_script_letters() {
        test_it("string_letters()");
        var result = string_letters("10moo20");
        assert_equal(result, "moo");
    }

    script string_script_letters_digits() {
        test_it("string_letters_digits()");
        var result = string_letters_digits("10.moo-20");
        assert_equal(result, "10moo20");
    }

    script string_script_lower() {
        test_it("string_lower()");
        var result = string_lower("HelLo");
        assert_equal(result, "hello");
    }

    script string_script_ord_at() {
        test_it("string_ord_at()");
        var result = string_ord_at("!", 0);
        assert_equal(result, 33);
    }

    script string_script_pos() {
        test_it("string_pos");
        var result = string_pos("hello", "ll");
        assert_equal(result, 2);
        result = string_pos("hello", "q");
        assert_equal(result, -1);
    }

    script string_script_repeat() {
        test_it("string_repeat()");
        var result = string_repeat("moo", 3);
        assert_equal(result, "moomoomoo");
    }

    script string_script_replace() {
        test_it("string_replace()");
        var result = string_replace("hello", "e", "u");
        assert_equal(result, "hullo");
    }

    script string_script_replace_all() {
        test_it("string_replace_all()");
        var result = string_replace_all("hello", "l", "r");
        assert_equal(result, "herro");
    }

    script string_script_upper() {
        test_it("string_upper()");
        var result = string_upper("Hello");
        assert_equal(result, "HELLO");
    }
}