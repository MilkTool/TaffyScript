using UnitTests;
using TaffyScript.Collections;

namespace LanguageTests {
    script run_prefix_tests() {
        var obj = new obj_prefix();
        var tests = new UnitTest("Prefix Tests",
                                 prefix_negate,
                                 prefix_positive,
                                 prefix_not,
                                 prefix_complement,
                                 prefix_increment_array,
                                 prefix_decrement_array,
                                 prefix_increment_list,
                                 prefix_decrement_list,
                                 prefix_increment_local_var,
                                 prefix_decrement_local_var,
                                 prefix_increment_global_var,
                                 prefix_decrement_global_var,
                                 prefix_increment_local_object_var,
                                 prefix_decrement_local_object_var,
                                 prefix_increment_global_object_var,
                                 prefix_decrement_global_object_var,
                                 obj.prefix_increment_object_var,
                                 obj.prefix_decrement_object_var,
                                 obj.prefix_increment_self_var,
                                 obj.prefix_decrement_self_var);

        tests.run_tests();
    }

    script prefix_negate() {
        test_it("-i");
        var i = 2;
        var j = -i;
        assert_equal(j, -2);
    }

    script prefix_positive() {
        test_it("+i");
        var i = 2;
        var j = +i;
        assert_equal(j, 2);
        i = -2;
        j = +i;
        assert_equal(j, -2);
    }

    script prefix_not() {
        test_it("!bool");
        var i = true;
        var j = !i;
        assert_equal(j, false);
    }

    script prefix_complement() {
        test_it("~i");
        var i = 2;
        var j = ~i;
        assert_equal(j, -3);
    }

    script prefix_increment_array() {
        test_it("++array")
        var arr = [1];
        ++arr[0];
        assert_equal(arr[0], 2);
        var j = ++arr[0];
        assert_equal(j, 3);
        assert_equal(arr[0], 3);
    }

    script prefix_decrement_array() {
        test_it("--array")
        var arr = [2];
        --arr[0];
        assert_equal(arr[0], 1);
        var j = --arr[0];
        assert_equal(j, 0);
        assert_equal(arr[0], 0);
    }

    script prefix_increment_list() {
        test_it("++list");
        var list = new List();
        list.add(2);
        ++list[0];
        assert_equal(list[0], 3);
        var j = ++list[0];
        assert_equal(j, 4);
        assert_equal(list[0], 4);
    }

    script prefix_decrement_list() {
        test_it("--list");
        var list = new List();
        list.add(2);
        --list[0];
        assert_equal(list[0], 1);
        var j = --list[0];
        assert_equal(j, 0);
        assert_equal(list[0], 0);
    }

    script prefix_increment_local_var() {
        test_it("++local_var");
        var i = 2;
        ++i;
        assert_equal(i, 3);
        var j = ++i;
        assert_equal(j, 4);
        assert_equal(i, 4);
    }

    script prefix_decrement_local_var() {
        test_it("--local_var");
        var i = 2;
        --i;
        assert_equal(i, 1);
        var j = --i;
        assert_equal(j, 0);
        assert_equal(i, 0);
    }

    script prefix_increment_local_object_var() {
        test_it("++local_object_var");
        var obj = new obj_prefix();
        ++obj.val;
        assert_equal(obj.val, 3);
        var j = ++obj.val;
        assert_equal(j, 4);
        assert_equal(obj.val, 4);
    }

    script prefix_decrement_local_object_var() {
        test_it("--local_object_var");
        var obj = new obj_prefix();
        --obj.val;
        assert_equal(obj.val, 1);
        var j = --obj.val;
        assert_equal(j, 0);
        assert_equal(obj.val, 0);
    }

    script prefix_increment_global_var() {
        test_it("++global_var");
        global.val = 2;
        ++global.val;
        assert_equal(global.val, 3);
        var j = ++global.val;
        assert_equal(j, 4);
        assert_equal(global.val, 4);
    }

    script prefix_decrement_global_var() {
        test_it("--global_var");
        global.val = 2;
        --global.val;
        assert_equal(global.val, 1);
        var j = --global.val;
        assert_equal(j, 0);
        assert_equal(global.val, 0);
    }

    script prefix_increment_global_object_var() {
        test_it("++global_object_var");
        global.obj = new obj_prefix();
        ++global.obj.val;
        assert_equal(global.obj.val, 3);
        var j = ++global.obj.val;
        assert_equal(j, 4);
        assert_equal(global.obj.val, 4);
    }

    script prefix_decrement_global_object_var() {
        test_it("--global_object_var");
        global.obj = new obj_prefix();
        --global.obj.val;
        assert_equal(global.obj.val, 1);
        var j = --global.obj.val;
        assert_equal(j, 0);
        assert_equal(global.obj.val, 0);
    }

    object obj_prefix {
        script create() {
            reset();
        }

        script reset() {
            val = 2;
        }

        script prefix_increment_object_var() {
            test_it("++obj_var")
            reset();
            ++val;
            assert_equal(val, 3);
            var j = ++val;
            assert_equal(j, 4);
            assert_equal(val, 4);
        }

        script prefix_decrement_object_var() {
            test_it("--obj_var");
            reset();
            --val;
            assert_equal(val, 1);
            var j = --val;
            assert_equal(j, 0);
            assert_equal(val, 0);
        }

        script prefix_increment_self_var() {
            test_it("++self_var");
            reset();
            ++self.val;
            assert_equal(val, 3);
            var j = ++self.val;
            assert_equal(j, 4);
            assert_equal(val, 4);
        }

        script prefix_decrement_self_var() {
            test_it("--self_var");
            reset();
            --self.val;
            assert_equal(val, 1);
            var j = --self.val;
            assert_equal(j, 0);
            assert_equal(val, 0);
        }
    }
}