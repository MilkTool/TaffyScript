using UnitTest;
using TaffyScript.Collections;

namespace LanguageTests {
    script run_with_tests() {
        var tests = new obj_unit_test("With Tests",
                                      with_can_compile,
                                      with_can_access_local_ts,
                                      with_can_access_local_cs,
                                      with_can_call_event_ts,
                                      with_can_call_event_cs,
                                      with_sets_other);
        tests.run_tests();
    }

    script with_can_compile() {
        test_it("with(ts)");
        var obj = new obj_with(0);
        with(obj) {
            var i = 0;
        }
    }

    script with_can_access_local_ts() {
        test_it("with(ts) local");
        var obj = new obj_with(2);
        with(obj) {
            assert_equal(num, 2);
        }
    }

    script with_can_access_local_cs() {
        test_it("with(cs) local");
        var list = new ds_list();
        list.add(3);
        with(list) {
            assert_equal(count, 1);
        }
    }

    script with_can_call_event_ts() {
        test_it("with(ts) event()");
        var obj = new obj_with(2);
        with(obj) {
            assert_equal(get_value(), 4);
        }
    }

    script with_can_call_event_cs() {
        test_it("with(cs) event()");
        var list = new ds_list();
        with(list) {
            add(4, 3);
        }
        assert_equal(list.count, 2);
    }

    script with_sets_other() {
        test_it("with(ts) other.val");
        var obj2 = new obj_with(2);
        var obj3 = new obj_with(3);
        with(obj2) {
            with(obj3) {
                assert_equal(other.num, 2);
                assert_equal(num, 3);
            }
        }
    }

    object obj_with {
        script create(num) {
            self.num = num;
        }

        script get_value() {
            return 4;
        }
    }
}