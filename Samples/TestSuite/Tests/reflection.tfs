using UnitTest;

namespace LanguageTests {
    script run_reflection_tests() {
        var tests = new obj_unit_test("Reflection Tests",
                                      event_perform_with_args,
                                      event_perform_without_args,
                                      event_perform_object_with_args,
                                      event_perform_object_without_args,
                                      instance_change_with_create,
                                      instance_change_without_create,
                                      instance_copy_with_create,
                                      instance_copy_without_create);
        tests.run_tests();
    }

    script event_perform_with_args() {
        test_it("event_perform(args..)");
        var result;
        var obj = new obj_mirror();
        with(obj) {
            result = event_perform("echo", 8);
        }
        assert_equal(result, 8);
    }

    script event_perform_without_args() {
        test_it("event_perform()");
        var result;
        var obj = new obj_mirror();
        with(obj) {
            result = event_perform("get10");
        }

        assert_equal(result, 10);
    }

    script event_perform_object_with_args() {
        test_it("event_perform_object(args..)");
        var result;
        var obj = new obj_mirror();
        with(obj) {
            result = event_perform_object("LanguageTests.obj_mirror", "echo", 7);
        }

        assert_equal(result, 7);
    }

    script event_perform_object_without_args() {
        test_it("event_perform_object()");
        var result;
        var obj = new obj_mirror();
        with(obj) {
            result = event_perform_object(obj_mirror, "get10");
        }

        assert_equal(result, 10);
    }

    script instance_change_with_create() {
        test_it("instance_change(true)");
        var obj = new obj_mirror();
        instance_change(obj, obj_change, true);

        assert_equal(obj.value, 15);
        assert_equal(object_get_name(obj), obj_change);
    }

    script instance_change_without_create() {
        test_it("instance_change(false)");
        var obj = new obj_mirror();
        instance_change(obj, obj_change);

        assert_equal(obj.value, 10);
        assert_equal(object_get_name(obj), obj_change);
    }

    script instance_copy_with_create() {
        test_it("instance_copy(true)");
        var obj = new obj_mirror();
        obj.value = 20;
        var copy = instance_copy(obj, true);
        assert_not_equal(obj.value, copy.value);
        assert_equal(object_get_name(obj), object_get_name(copy));
    }

    script instance_copy_without_create() {
        test_it("instance_copy(false)");
        var obj = new obj_mirror();
        obj.value = 15;
        var copy = instance_copy(obj);
        assert_equal(obj.value, copy.value);
        assert_not_equal(obj, copy);
        assert_equal(object_get_name(obj), object_get_name(copy));
    }

    object obj_mirror {
        script create() {
            value = 10;
        }

        script get10() {
            return 10;
        }

        script echo(arg) {
            return arg;
        }
    }

    object obj_change {
        script create(value = 15) {
            self.value = 15;
        }
    }
}