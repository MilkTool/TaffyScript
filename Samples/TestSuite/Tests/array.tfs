using UnitTests;
using TaffyScript.Tests;
using TaffyScript.Reflection;

namespace LanguageTests {
    script run_array_tests() {
        var tests = new UnitTest("Array Tests",
                                 array1_create_literal,
                                 array1_create_script,
                                 array1_create_type,
                                 array1_set_in_bounds,
                                 array1_set_out_of_bounds,
                                 array1_get_in_bounds,
                                 array1_get_out_of_bounds,
                                 array2_create,
                                 array2_set_left_ib_right_ib,
                                 array2_set_left_ib_right_oob,
                                 array2_set_left_oob_right_ib,
                                 array2_set_left_oob_right_oob,
                                 array2_get_left_ib_right_ib,
                                 array2_get_left_ib_right_oob,
                                 array2_get_left_oob_right_ib,
                                 array2_get_left_oob_right_oob,
                                 array_copy_test,
                                 array_create_script_with_default,
                                 array_equals_true,
                                 array_equals_false,
                                 array1_length,
                                 array1_length_script,
                                 array2_height,
                                 array2_length,
                                 array4_get,
                                 array4_length,
                                 array_is_array);

        tests.run_tests();
    }

    script array1_create_literal {
        test_it("arr = []");
        var arr = [];
        assert(is_array(arr));
    }

    script array1_create_script {
        test_it("arr = array_create()");
        var arr = array_create(1);
        assert(is_array(arr));
    }

    script array1_create_type() {
        test_it("arr = new Array()");
        var arr = new Array(5);
        assert(is_array(arr));
        assert_equal(new Array(5).length, 5);
        assert_equal(new Array(5).get_length(), 5);
    }

    script array1_set_in_bounds {
        test_it("arr[0] = val (in bounds)");
        var arr = [0, 1];
        arr[0] = "moo";
        assert_equal(arr[0], "moo");
    }

    script array1_set_out_of_bounds {
        test_it("arr[2] = val (oob)");
        expect_error("IndexOutOfRangeException");
        var arr = [0, 1];
        arr[2] = "moo";
        assert_equal(arr[2], "moo");
    }

    script array1_get_in_bounds {
        test_it("i = arr[0] (in bounds)");
        var arr = [0, 2];
        var i = arr[1];
        assert_equal(i, 2);
    }

    script array1_get_out_of_bounds {
        test_it("i = arr[1] (oob)");
        expect_error("IndexOutOfRangeException");
        var arr = [0, 2];
        var i = arr[2];
    }

    script array2_create() {
        test_it("var arr; arr[0,1] = val");
        var arr = [["", "moo"]];
        assert(is_array(arr));
    }

    script array2_set_left_ib_right_ib() {
        test_it("arr[0 (ib), 0 (ib)] = val");
        var arr = [[0]];
        arr[0, 0] = 33;
        assert_equal(arr[0, 0], 33);
    }

    script array2_set_left_ib_right_oob() {
        test_it("arr[0 (ib), 1 (oob)] = val");
        expect_error("IndexOutOfRangeException");
        var arr = [[0],[33]];
        assert_equal(arr[0, 1], 33);
    }

    script array2_set_left_oob_right_ib() {
        test_it("arr[1 (oob), 0 (ib)] = val");
        expect_error("IndexOutOfRangeException");
        var arr = [[0,33]];
        assert_equal(arr[1, 0], 33);
    }

    script array2_set_left_oob_right_oob() {
        test_it("arr[1 (oob), 1 (oob)] = val");
        expect_error("IndexOutOfRangeException");
        var arr = [[0]];
        assert_equal(arr[0, 1], 33);
    }

    script array2_get_left_ib_right_ib() {
        test_it("val = arr[0 (ib), 0 (ib)]");
        var arr = [[33]];
        var result = arr[0, 0];
        assert_equal(result, 33);
    }

    script array2_get_left_ib_right_oob() {
        test_it("arr[0, 1 (oob)]");
        expect_error("IndexOutOfRangeException");
        var arr = [[0]];
        var result = arr[0, 1];
    }

    script array2_get_left_oob_right_ib() {
        test_it("arr[1 (oob), 0]");
        expect_error("IndexOutOfRangeException");
        var arr = [[0]];
        var result = arr[1, 0];
    }

    script array2_get_left_oob_right_oob() {
        test_it("arr[1 (oob), 1 (oob)]");
        expect_error("IndexOutOfRangeException");
        var arr = [[0]];
        var result = arr[1, 1];
    }

    script array_copy_test() {
        test_it("array_copy");
        var arr1 = [0,1,2,3];
        var arr2 = [4,5,6];
        array_copy(arr2, 0, arr1, 1, 3); //Copies arr2 into arr1
        assert_equal(arr1[0], 0);
        assert_equal(arr1[1], 4);
    }

    script array_create_script_with_default() {
        test_it("array_create(length, default)");
        var arr = array_create(2, 3);
        assert_equal(arr[0], 3);
    }

    script array_equals_true() {
        test_it("array_equals(arr1, arr2) == true");
        var arr1 = [0,1,2];
        var arr2 = [0,1,2];
        assert(array_equals(arr1, arr2));
    }

    script array_equals_false() {
        test_it("array_equals(arr1, arr2) == false");
        var arr1 = [0,1,2];
        var arr2 = [0,1,3];
        assert_false(array_equals(arr1, arr2));
    }

    script array1_length() {
        test_it("arr.length");
        var arr = [0,1,2];
        assert_equal(arr.length, 3);
    }

    script array1_length_script() {
        test_it("arr.get_length()");
        var arr = [0,1,2];
        assert_equal(arr.get_length(), 3);
    }

    script array2_height() {
        test_it("array_height_2d(arr)");
        var arr = [0,0,0,[0,0,0,0,"moo"]];
        assert_equal(arr.length, 4);
    }

    script array2_length() {
        test_it("array_length_2d(arr, index)");
        var arr = [0,0,[0,0,0,0,"moo"],[0,0,0,0,0,3]];
        assert_equal(arr.get_length(2), 5);
        assert_equal(arr.get_length(3), 6);
    }

    script array4_get(){
        test_it("var = arr[0, 0, 0, 0]");
        var arr = [[[[0,0,0,0,"moo"]]]];
        assert_equal(arr[0, 0, 0, 4], "moo");
    }

    script array4_length() {
        test_it("array_length(arr, 0, 0, 0)");
        var arr = [[[[0,0,0,0,"moo"]]]];
        assert_equal(arr.get_length(0, 0, 0), 5);
    }

    script array_is_array() {
        test_it("typeof(array)");
        var arr = [0,1,2];
        assert(is_array(arr));
    }
}