//This project is based off of the GaMaTas project for GameMaker Studio.
//To find more information, you can view the project here:
//https://github.com/gm-core/gamatas

using TaffyScript.Collections;

namespace UnitTest {
    object obj_unit_test {
        event create(test_suite_name) {
            if(argument_count < 2)
                show_error("You must provide at least the test suite name and one test.", true);

            test_number = 0;
            tests_failed = false;
            test_suite = test_suite_name;
            test_description = "";
            tests = new ds_list();
            for(var i = 1; i < argument_count; i++) {
                tests.add(argument[i]);
            }
        }

        event run_tests() {
            var count = tests.count;
            for(var i = 0; i < count; i++) {
                global._unit_test = self;
                test_description = "";
                tests[i]();
                show_debug_message(string(test_description) + " tests have passed.");
            }
            if(tests_failed)
                show_error("Not all tests passed. See output for more info.", true);
            else
                show_debug_message("All tests have passed - " + test_suite);
        }
    }

    script test_it {
        global._unit_test.test_description = argument0;
    }

    script assert {
        if(argument_count == 1)
            assert_is_true(argument0);
        else
            assert_is_true(argument0, argument1);
    }

    script assert_equal {
        global._unit_test.test_number++;
        if(argument0 != argument1) {
            var msg;
            if(argument_count > 2)
                msg = argument2;
            else {
                msg = scr_ut_create_assert_error(string(argument0) + " is not " + string(argument1));
            }

            test_fail(msg);
        }
    }

    script assert_not_equal {
        global._unit_test.test_number++;
        if(argument0 == argument1) {
            var msg;
            if(argument_count > 2)
                msg = argument2;
            else
                msg = scr_ut_create_assert_error(string(argument0) + " is " + string(argument1));

            test_fail(msg);
        }
    }

    script assert_exists {
        global._unit_test.test_number++;
        if(!instance_exists(argument0)){
            var msg;
            if(argument_count > 1)
                msg = argument1;
            else
                msg = scr_ut_create_assert_error(string(argument0) + " has no instances");

            test_fail(msg);
        }
    }

    script assert_does_not_exist {
        global._unit_test.test_number++;
        if(instance_exists(argument0)){
            var msg;
            if(argument_count > 1)
                msg = argument1;
            else
                msg = scr_ut_create_assert_error(string(argument0) + " should not exist");

            test_fail(msg);
        }
    }

    script assert_is_true {
        if(argument_count > 1)
            assert_equal(argument0, true, argument1);
        else
            assert_equal(argument0, true);
    }

    script assert_is_false {
        if(argument_count > 1)
            assert_equal(argument0, false, argument1);
        else
            assert_equal(argument0, false);
    }

    script assert_is_undefined {
        global._unit_test.test_number++;
        if(!is_undefined(argument0)) {
            var msg;
            if(argument_count > 1)
                msg = argument1;
            else
                msg = scr_ut_create_assert_error(string(argument0) + " is not undefined");
        }
    }

    script scr_ut_create_assert_error {
        return "ASSERT ERROR - " + string(argument0) + " - ASSERT #" + string(global._unit_test.test_number);
    }

    script test_fail {
        var msg = argument0;
        show_debug_message(msg);
        show_debug_message(global._unit_test.test_description);
        show_debug_message("In suite " + global._unit_test.test_suite);

        global._unit_test.tests_failed = true;
    }
}