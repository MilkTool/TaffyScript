using UnitTest;

namespace LanguageTests {
    script main {
        var tests = new obj_unit_test("Operator Tests", 
                                      addition_tests,
                                      array_literal,
                                      assignment,
                                      postfix,
                                      prefix);
        tests.run_tests();
        tests.destroy();
    }

    script addition_tests() {
        test_it("Addition");
        var left = 30;
        var right = 10;
        assert_equal(left + right, 40);
        assert_equal(left + 10, 40);
        assert_equal(30 + right, 40);
        assert_equal(30 + 10, 40);
        left = "hello ";
        right = "world";
        assert_equal(left + right, "hello world");
        assert_equal(left + "world", "hello world");
        assert_equal("hello " + right, "hello world");
        assert_equal("hello " + "world", "hello world");
    }

    script array_literal() {
        test_it("Array Literal");
        var arr = [0, 1, 6];
        assert_equal(arr[0], 0);
        assert_equal(arr[2], 6);
    }

    script assignment() {
        test_it("Assignment");
        assignment_1("yo");

        var val = 1;
        assert_equal(val, 1);
        val = 2;
        assert_equal(val, 2);

        var arr = [0, 1];
        assert_equal(arr[1], 1);
        arr[1] = 36;
        assert_equal(arr[1], 36);

        var list = ds_list_create();
        ds_list_add(list, 0);
        assert_equal(list[| 0], 0);
        list[| 0] = 66;
        assert_equal(list[| 0], 66);

        var grid = ds_grid_create(5, 5);
        grid[# 0, 2] = 12;
        assert_equal(grid[# 0, 2], 12);

        var map = ds_map_create();
        map[? "key"] = "value";
        assert_equal(map[? "key"], "value");

        var obj = new obj_test();
        obj.assignment();
        obj.val = 99;
        assert_equal(obj.val, 99);

        global.obj = obj;
        global.obj.val = -5;
        assert_equal(global.obj.val, -5);

        global.val = 66;
        assert_equal(global.val, 66);

        val += 1;
        assert_equal(val, 3);

        arr[1] += 1;
        assert_equal(arr[1], 37);

        list[| 0] += 1;
        assert_equal(list[| 0], 67);

        grid[# 0, 2] += 1;
        assert_equal(grid[# 0, 2], 13);

        map[? "key"] += "moo";
        assert_equal(map[? "key"], "valuemoo");

        obj.val += 1;
        assert_equal(obj.val, -4);

        global.obj.val += 1;
        assert_equal(global.obj.val, -3);

        global.val += 1;
        assert_equal(global.val, 67);

        ds_map_destroy(map);
        ds_grid_destroy(grid);
        ds_list_destroy(list);
        obj.destroy();
    }

    script assignment_1() {
        var value = argument0;
        assert_equal(value, argument0);
        argument0 = 36;
        assert_equal(argument0, 36);

        argument0 += 1;
        assert_equal(argument0, 37);
    }

    script postfix() {
        test_it("Postfix");
        var i = 0;
        i++;
        assert_equal(i, 1);
        var j = i++;
        assert_equal(j, 1);
        assert_equal(i, 2);
        var obj = new obj_test();
        obj.val++;
        assert_equal(obj.val, 31);
        j = obj.val++;
        assert_equal(j, 31);
        assert_equal(obj.val, 32);
        global.val = 64;
        global.val++;
        assert_equal(global.val, 65);
        j = global.val++;
        assert_equal(j, 65);
        assert_equal(global.val, 66);
        global.obj = obj;
        global.obj.val++;
        assert_equal(global.obj.val, 33);
        j = global.obj.val++;
        assert_equal(j, 33);
        assert_equal(global.obj.val, 34);
        obj.postfix();
        obj.destroy();
    }

    script prefix() {
        test_it("Prefix");
        var i = 0;
        ++i;
        assert_equal(i, 1);
        var j = ++i;
        assert_equal(j, 2);
        assert_equal(i, 2);
        var obj = new obj_test();
        ++obj.val;
        assert_equal(obj.val, 31);
        j = ++obj.val;
        assert_equal(j, 32);
        assert_equal(obj.val, 32);
        global.val = 64;
        ++global.val;
        assert_equal(global.val, 65);
        j = ++global.val;
        assert_equal(j, 66);
        assert_equal(global.val, 66);
        global.obj = obj;
        ++global.obj.val;
        assert_equal(global.obj.val, 33);
        j = ++global.obj.val;
        assert_equal(j, 34);
        assert_equal(global.obj.val, 34);
        obj.prefix();
        obj.destroy();
    }

    object obj_test {
        event create() {
            val = 30;
        }

        event postfix() {
            val++;
            assert_equal(val, 35);
            var j = val++;
            assert_equal(j, 35);
            assert_equal(val, 36);
            self.val++;
            assert_equal(self.val, 37);
            j = self.val++;
            assert_equal(j, 37);
            assert_equal(self.val, 38);
        }

        event prefix() {
            val = 30;
            ++val;
            assert_equal(val, 31);
            var j = ++val;
            assert_equal(j, 32);
            assert_equal(val, 32);
            ++self.val;
            assert_equal(self.val, 33);
            j = ++self.val;
            assert_equal(j, 34);
            assert_equal(self.val, 34);
        }

        event il_test() {
            ++val;
        }

        event assignment() {
            val = 50;
            assert_equal(val, 50);
            self.val = 49;
            assert_equal(self.val, 49);
            val += 2;
            assert_equal(val, 51);
            //self.val += 1;
            //assert_equal(self.val, 52);
        }
    }
}