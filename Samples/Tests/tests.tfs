using UnitTest;

namespace LanguageTests {
    script main {
        var tests = scr_create_test_suite("Operator Tests", 
                                          addition_test, 
                                          multiplication_test, 
                                          shift_test, 
                                          conditional_test, 
                                          logical_test, 
                                          bitwise_test, 
                                          equality_tests, 
                                          unary_tests, 
                                          list_tests, 
                                          map_tests, 
                                          grid_tests, 
                                          string_tests);
        scr_run_tests(tests);
    }

    object obj_parent {
        event create {
            show_debug_message("Parent Created");
        }

        event destroy {
            show_debug_message("Parent Destroyed.");
        }
    }

    object obj_child : obj_parent {
        event create {
            event_inherited();
            show_debug_message("Child Created");
        }
    }

    script addition_test {
        test_it("Addition and Subtraction");
        var result = add(5, 6);
        assert_equal(result, 11);
        result = sub(5, 6);
        assert_equal(result, -1);
    }

    script multiplication_test {
        test_it("Multiplication, Division, and Modulus");
        var result = mul(6, 3);
        assert_equal(result, 18);
        result = div(50, 5);
        assert_equal(result, 10);
        result = mod(41, 2);
        assert_equal(result, 1);
    }

    script shift_test {
        test_it("Shift Right and Left");
        var result = shift_left(1, 3);
        assert_equal(result, 8);
        result = shift_right(16, 3);
        assert_equal(result, 2);
    }

    script conditional_test {
        test_it("Conditional");
        var result = conditional(true, 4, 6);
        assert_equal(result, 4);
        result = conditional(false, 4, 6);
        assert_equal(result, 6);
    }

    script logical_test {
        test_it("Logical And and Or");
        var result = logical_or(false, true);
        assert_equal(result, true);
        result = logical_and(false, true);
        assert_equal(result, false);
        result = logical_and(true, true);
        assert_equal(result, true);
    }

    script bitwise_test {
        test_it("Bitwise And, Or, and Xor");
        var result = bitwise_and(13, 14);
        assert_equal(result, 12);
        result = bitwise_or(13, 2);
        assert_equal(result, 15);
        result = xor(15, 2);
        assert_equal(result, 13);
    }

    script equality_tests {
        test_it("Equality and Relational");
        var result = equals(6, 6);
        assert_equal(result, true);
        result = not_equals(6, 6);
        assert_equal(result, false);
        result = less_than(5, 6);
        assert_equal(result, true);
        result = less_than(6, 5);
        assert_equal(result, false);
        result = less_than_or_equal(6, 6);
        assert_equal(result, true);
        result = less_than_or_equal(7, 6);
        assert_equal(result, false);
        result = greater_than(6, 5);
        assert_equal(result, true);
        result = greater_than(5, 6);
        assert_equal(result, false);
        result = greater_than_or_equal(6, 6);
        assert_equal(result, true);
        result = greater_than_or_equal(6, 7);
        assert_equal(result, false);
    }

    script unary_tests {
        test_it("Unary");
        var result = positive(6);
        assert_equal(result, 6);
        result = positive(-6);
        assert_equal(result, -6);
        result = negative(-6);
        assert_equal(result, 6);
        result = not(false);
        assert_equal(result, true);
        result = complement(5);
        assert_equal(result, -6);
        result = postfix_plus(5);
        assert_equal(result, 5);
        result = postfix_minus(4);
        assert_equal(result, 4);
        result = prefix_plus(9);
        assert_equal(result, 10);
        result = prefix_minus(9);
        assert_equal(result, 8);
    }

    script array_tests {
        test_it("Array Reading and Writing");
        var arr;
        arr[10] = 6;
        assert_equal(arr[10], 6);
        assert_equal(arr[10]++, 6);
        assert_equal(arr[10], 7);
        assert_equal(++arr[10], 8);
        arr[10] += 8;
        assert_equal(arr[10], 16);
    }

    script list_tests {
        test_it("List Reading and Writing");
        var list = ds_list_create();
        list[| 2] = 6;
        assert_equal(list[| 2], 6);
        assert_equal(list[| 2]++, 6);
        assert_equal(list[| 2], 7);
        assert_equal(++list[| 2], 8);
        list[| 2] += 8;
        assert_equal(list[| 2], 16);
    }


    script map_tests {
        test_it("Map Reading and Writing");
        var map = ds_map_create();
        map[? "key"] = 6;
        assert_equal(map[? "key"], 6);
        assert_equal(map[? "key"]++, 6);
        assert_equal(map[? "key"], 7);
        assert_equal(++map[? "key"], 8);
        map[? "key"] += 8;
        assert_equal(map[? "key"], 16);
    }

    script grid_tests {
        test_it("Grid Reading and Writing");
        var grid = ds_grid_create(2, 2);
        grid[# 0, 1] = 6;
        assert_equal(grid[# 0, 1], 6);
        assert_equal(grid[# 0, 1]++, 6);
        assert_equal(grid[# 0, 1], 7);
        assert_equal(++grid[# 0, 1], 8);
        grid[# 0, 1] += 8;
        assert_equal(grid[# 0, 1], 16);
    }

    script string_tests {
        test_it("String Functions");
        var str = string(5);
        assert_equal(str, "5");
        str = "hello, world";
        var byte = string_byte_at(str, 3);
        assert_equal(byte, 108);
        assert_equal(string_byte_length(str), 12);
        assert_equal(string_char_at(str, 0), "h");
        var copy = string_copy(str, 0, 5);
        assert_equal(copy, "hello");
        var count = string_count("l", str);
        assert_equal(count, 3);
        var delete = string_delete(str, 0, 1);
        assert_equal(delete, "ello, world");
        var test = "12t.46gh";
        assert_equal(string_digits(test), "1246");
        delete = string_insert("h", delete, 0);
        assert_equal(delete, str);
        assert_equal(string_length(str), 12);
        assert_equal(string_letters(test), "tgh");
        assert_equal(string_lettersdigits(test), "12t46gh");
        assert_equal(string_lower("HELLO, WORLD"), str);
        assert_equal(string_ord_at(str, 0), 104);
        assert_equal(string_repeat("oink ", 2), "oink oink ");
        assert_equal(string_replace("moo oink", "moo", "oink"), "oink oink");
        assert_equal(string_replace_all("moo moo", "moo", "oink"), "oink oink");
        assert_equal(string_set_byte("hello", 1, 97), "hallo");
        assert_equal(string_upper(str), "HELLO, WORLD");
    }

    script add {
        return argument0 + argument1;
    }

    script sub {
        return argument0 - argument1;
    }

    script mul {
        return argument0 * argument1;
    }

    script div {
        return argument0 / argument1;
    }

    script mod {
        return argument0 % argument1;
    }

    script shift_left {
        return argument0 << argument1;
    }

    script shift_right {
        return argument0 >> argument1;
    }

    script conditional {
        return argument0 ? argument1 : argument2;
    }

    script logical_or {
        return argument0 || argument1;
    }

    script logical_and {
        return argument0 && argument1;
    }

    script bitwise_or {
        return argument0 | argument1;
    }

    script bitwise_and {
        return argument0 & argument1;
    }

    script xor {
        return argument0 ^ argument1;
    }

    script equals {
        return argument0 == argument1;
    }

    script not_equals {
        return argument0 != argument1;
    }

    script less_than {
        return argument0 < argument1;
    }

    script less_than_or_equal {
        return argument0 <= argument1;
    }

    script greater_than {
        return argument0 > argument1;
    }

    script greater_than_or_equal {
        return argument0 >= argument1;
    }

    script positive {
        return +argument0;
    }

    script negative {
        return -argument0;
    }

    script not {
        return !argument0;
    }

    script complement {
        return ~argument0;
    }

    script postfix_plus {
        return argument0++;
    }

    script postfix_minus {
        return argument0--;
    }

    script prefix_plus {
        return ++argument0;
    }

    script prefix_minus {
        return --argument0;
    }

    script array_access {
        return argument0[0];
    }
}